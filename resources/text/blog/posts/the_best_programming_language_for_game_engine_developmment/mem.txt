As an <span class="info-text-6">unmanaged</span> programming language, <span class="info-text-0">memory management</span> in <span class="info-text-3">C++</span> is different from other <span class="info-text-9">managed</span> programming languages such as Java and C#, in which it does not have <span class="info-text-5">Garbage Collector</span> (<span class="info-text-2">GC</span>), dynamic memory is not <span class="info-text-9">managed</span> automatically and we could get the memory leak issue if not deallocate dynamic memory.

Besides, the <span class="info-text-6">unmanaged</span> memory functionalities in <span class="info-text-3">C++</span> are also crucial to high performance software. Due to its complexity, the <span class="info-text-7">general memory allocator</span> implementation for multiple purposes is usually not efficient and indeed can cost high performance. Thus, most modern <span class="info-text-3">C++</span> game engines use custom memory allocators with different <span class="info-text-0">memory management</span> mechanisms for specific purposes. For instance, they often implement the <span class="info-text-8">frame allocator</span> that basically allocates memory by increasing the memory usage inside the allocated memory chunks every allocations and only deallocates memory at the end of frame.